<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SCypher Address Derivation Test</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            color: #e0e0e0;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(40, 40, 40, 0.95);
            border-radius: 12px;
            border: 1px solid #4a4a4a;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo {
            font-size: 2.5em;
            font-weight: 700;
            color: #ff9500;
            margin-bottom: 8px;
        }

        .tagline {
            color: #888;
            font-size: 0.95em;
        }

        .section {
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 1.2em;
            font-weight: 600;
            color: #ff9500;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .section-title::before {
            content: '';
            width: 4px;
            height: 20px;
            background: #ff9500;
            border-radius: 2px;
        }

        .input-group {
            margin-bottom: 20px;
        }

        .label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #ddd;
        }

        .textarea {
            width: 100%;
            min-height: 120px;
            padding: 16px;
            background: rgba(60, 60, 60, 0.5);
            border: 2px solid #666;
            border-radius: 8px;
            color: #e0e0e0;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
            resize: vertical;
            transition: all 0.3s ease;
        }

        .textarea:focus {
            outline: none;
            border-color: #ff9500;
            background: rgba(60, 60, 60, 0.8);
            box-shadow: 0 0 0 3px rgba(255, 149, 0, 0.1);
        }

        .input {
            width: 100%;
            padding: 12px 16px;
            background: rgba(60, 60, 60, 0.5);
            border: 1px solid #555;
            border-radius: 6px;
            color: #e0e0e0;
            font-family: inherit;
            transition: all 0.3s ease;
        }

        .input:focus {
            outline: none;
            border-color: #ff9500;
            background: rgba(60, 60, 60, 0.8);
            box-shadow: 0 0 0 3px rgba(255, 149, 0, 0.1);
        }

        .network-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
            margin-bottom: 20px;
        }

        .network-button {
            background: rgba(60, 60, 60, 0.8);
            border: 1px solid #555;
            color: #ccc;
            padding: 12px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s ease;
            font-weight: 500;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            min-height: 48px;
        }

        .network-button:hover {
            background: rgba(80, 80, 80, 0.8);
            color: #fff;
            transform: translateY(-1px);
        }

        .network-button.active {
            background: rgba(255, 149, 0, 0.2);
            border-color: #ff9500;
            color: #ff9500;
            box-shadow: 0 0 0 2px rgba(255, 149, 0, 0.1);
        }

        .network-button.active:hover {
            background: rgba(255, 149, 0, 0.3);
        }

        /* Colores espec√≠ficos por red */
        .network-button[data-network="bitcoin"].active { border-color: #f7931a; color: #f7931a; background: rgba(247, 147, 26, 0.2); }
        .network-button[data-network="ethereum"].active { border-color: #627eea; color: #627eea; background: rgba(98, 126, 234, 0.2); }
        .network-button[data-network="ergo"].active { border-color: #ff6600; color: #ff6600; background: rgba(255, 102, 0, 0.2); }
        .network-button[data-network="bsc"].active { border-color: #f3ba2f; color: #f3ba2f; background: rgba(243, 186, 47, 0.2); }
        .network-button[data-network="polygon"].active { border-color: #8247e5; color: #8247e5; background: rgba(130, 71, 229, 0.2); }
        .network-button[data-network="cardano"].active { border-color: #0033ad; color: #3498db; background: rgba(52, 152, 219, 0.2); }
        .network-button[data-network="dogecoin"].active { border-color: #c2a633; color: #c2a633; background: rgba(194, 166, 51, 0.2); }
        .network-button[data-network="litecoin"].active { border-color: #a6a9aa; color: #a6a9aa; background: rgba(166, 169, 170, 0.2); }
        .network-button[data-network="solana"].active { border-color: #9945ff; color: #9945ff; background: rgba(153, 69, 255, 0.2); }

        .control-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .button {
            background: linear-gradient(135deg, #ff9500 0%, #ff7b00 100%);
            color: white;
            border: none;
            padding: 14px 24px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1em;
            box-shadow: 0 4px 12px rgba(255, 149, 0, 0.3);
            min-width: 160px;
        }

        .button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 149, 0, 0.4);
        }

        .button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
            box-shadow: 0 4px 12px rgba(255, 149, 0, 0.1);
        }

        .button.secondary {
            background: linear-gradient(135deg, #555 0%, #444 100%);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .button.secondary:hover:not(:disabled) {
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
        }

        .status {
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .status.success {
            background: rgba(16, 185, 129, 0.2);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: #6ee7b7;
        }

        .status.error {
            background: rgba(239, 68, 68, 0.2);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: #fca5a5;
        }

        .status.info {
            background: rgba(59, 130, 246, 0.2);
            border: 1px solid rgba(59, 130, 246, 0.3);
            color: #93c5fd;
        }

        .results {
            margin-top: 30px;
        }

        .network-section {
            margin-bottom: 30px;
            background: rgba(30, 30, 30, 0.6);
            border: 1px solid #4a4a4a;
            border-radius: 8px;
            padding: 20px;
        }

        .network-title {
            font-size: 1.1em;
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .address-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 15px;
        }

        .address-card {
            background: rgba(50, 50, 50, 0.6);
            border: 1px solid #555;
            border-radius: 8px;
            padding: 16px;
            transition: all 0.3s ease;
        }

        .address-card:hover {
            background: rgba(60, 60, 60, 0.6);
            border-color: #666;
            transform: translateY(-2px);
        }

        .address-type {
            font-weight: 600;
            color: #ff9500;
            font-size: 0.95em;
            margin-bottom: 8px;
        }

        .address-path {
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.75em;
            color: #888;
            margin-bottom: 8px;
            background: rgba(30, 30, 30, 0.5);
            padding: 4px 8px;
            border-radius: 4px;
            border: 1px solid #444;
        }

        .address-value {
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.85em;
            word-break: break-all;
            color: #e0e0e0;
            background: rgba(20, 20, 20, 0.7);
            padding: 10px;
            border-radius: 6px;
            border: 1px solid #333;
            line-height: 1.4;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .address-value:hover {
            background: rgba(30, 30, 30, 0.7);
        }

        .copy-feedback {
            background: rgba(16, 185, 129, 0.2);
            border-color: #10b981;
            color: #6ee7b7;
        }

        .hidden {
            display: none;
        }

        .loading {
            text-align: center;
            color: #888;
            font-style: italic;
            padding: 40px;
        }

        .stats-bar {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
            padding: 15px;
            background: rgba(20, 20, 20, 0.5);
            border-radius: 8px;
            border: 1px solid #333;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 1.5em;
            font-weight: 700;
            color: #ff9500;
        }

        .stat-label {
            font-size: 0.8em;
            color: #888;
            margin-top: 2px;
        }

        @media (max-width: 768px) {
            .address-grid {
                grid-template-columns: 1fr;
            }

            .network-controls {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }

            .control-buttons {
                flex-direction: column;
            }

            .stats-bar {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">SCypher Test</div>
            <div class="tagline">HD Wallet Address Derivation Test - Extended Networks</div>
        </div>

        <div class="section">
            <div class="section-title">üìù Input Seed Phrase</div>

            <div class="input-group">
                <label class="label">BIP39 Seed Phrase (12, 15, 18, 21, or 24 words):</label>
                <textarea
                    class="textarea"
                    id="seedPhrase"
                    placeholder="Enter your BIP39 seed phrase here...&#10;Example: abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"
                ></textarea>
            </div>

            <div class="input-group">
                <label class="label">BIP39 Passphrase (optional):</label>
                <input
                    type="text"
                    class="input"
                    id="passphrase"
                    placeholder="Enter BIP39 passphrase (leave empty for standard derivation)"
                >
            </div>
        </div>

        <div class="section">
            <div class="section-title">üåê Select Networks</div>

            <div class="network-controls">
                <!-- Redes originales -->
                <button class="network-button active" data-network="bitcoin">‚Çø Bitcoin</button>
                <button class="network-button active" data-network="ethereum">Œû Ethereum</button>
                <button class="network-button active" data-network="ergo">‚ö° Ergo</button>

                <!-- Nuevas redes -->
                <button class="network-button" data-network="bsc">üü° Binance Smart Chain</button>
                <button class="network-button" data-network="polygon">üî∑ Polygon</button>
                <button class="network-button" data-network="cardano">‚Ç≥ Cardano</button>
                <button class="network-button" data-network="dogecoin">√ê Dogecoin</button>
                <button class="network-button" data-network="litecoin">≈Å Litecoin</button>
                <button class="network-button" data-network="solana">‚óé Solana</button>
            </div>

            <div class="control-buttons">
                <button class="button" id="deriveButton">üè† Derive Addresses</button>
                <button class="button secondary" id="selectAllButton">‚úÖ Select All</button>
                <button class="button secondary" id="clearAllButton">‚ùå Clear All</button>
            </div>
        </div>

        <div id="statusArea"></div>
        <div id="resultsArea" class="results hidden"></div>
    </div>

    <script>
        // Variables globales
        let tauriAvailable = false;
        let invoke = null;

        // Importar Tauri API din√°micamente
        async function loadTauriInvoke() {
            try {
                const { invoke: tauriInvoke } = await import('https://unpkg.com/@tauri-apps/api@1/tauri');
                console.log('‚úÖ Imported invoke from @tauri-apps/api');
                return tauriInvoke;
            } catch (error) {
                console.log('‚ùå CDN import failed:', error);
                return null;
            }
        }

        // Detectar si Tauri est√° disponible
        async function detectTauri() {
            const tauriInvoke = await loadTauriInvoke();

            if (tauriInvoke) {
                invoke = tauriInvoke;
                tauriAvailable = true;
                showStatus('‚úÖ Tauri backend connected successfully', 'success');
                return true;
            }

            showStatus('‚ùå Tauri backend not available', 'error');
            return false;
        }

        // Mostrar estado
        function showStatus(message, type = 'info') {
            const statusArea = document.getElementById('statusArea');
            statusArea.innerHTML = `<div class="status ${type}">${message}</div>`;
        }

        // Inicializar cuando el DOM carga
        document.addEventListener('DOMContentLoaded', async function() {
            await detectTauri();
            initializeEventListeners();
        });

        function initializeEventListeners() {
            // Network selection
            document.querySelectorAll('.network-button').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.target.classList.toggle('active');
                    updateDeriveButtonState();
                });
            });

            // Control buttons
            document.getElementById('deriveButton').addEventListener('click', deriveAddresses);
            document.getElementById('selectAllButton').addEventListener('click', selectAllNetworks);
            document.getElementById('clearAllButton').addEventListener('click', clearAllNetworks);

            // Initial button state
            updateDeriveButtonState();
        }

        function selectAllNetworks() {
            document.querySelectorAll('.network-button').forEach(btn => {
                btn.classList.add('active');
            });
            updateDeriveButtonState();
        }

        function clearAllNetworks() {
            document.querySelectorAll('.network-button').forEach(btn => {
                btn.classList.remove('active');
            });
            updateDeriveButtonState();
        }

        function updateDeriveButtonState() {
            const selectedNetworks = document.querySelectorAll('.network-button.active');
            const deriveButton = document.getElementById('deriveButton');

            if (selectedNetworks.length > 0) {
                deriveButton.disabled = false;
                deriveButton.textContent = `üè† Derive ${selectedNetworks.length} Network${selectedNetworks.length > 1 ? 's' : ''}`;
            } else {
                deriveButton.disabled = true;
                deriveButton.textContent = 'üè† Select Networks First';
            }
        }

        async function deriveAddresses() {
            if (!tauriAvailable) {
                showStatus('‚ùå Tauri backend not available', 'error');
                return;
            }

            const seedPhrase = document.getElementById('seedPhrase').value.trim();
            const passphrase = document.getElementById('passphrase').value.trim();
            const selectedNetworks = Array.from(document.querySelectorAll('.network-button.active'))
                .map(btn => btn.dataset.network);

            // Validaciones
            if (!seedPhrase) {
                showStatus('‚ùå Please enter a seed phrase', 'error');
                return;
            }

            if (selectedNetworks.length === 0) {
                showStatus('‚ùå Please select at least one network', 'error');
                return;
            }

            // Validar formato b√°sico
            const words = seedPhrase.split(/\s+/).filter(word => word.length > 0);
            const validCounts = [12, 15, 18, 21, 24];

            if (!validCounts.includes(words.length)) {
                showStatus(`‚ùå Invalid word count: ${words.length} (expected: 12, 15, 18, 21, or 24)`, 'error');
                return;
            }

            const deriveButton = document.getElementById('deriveButton');
            const originalText = deriveButton.textContent;

            deriveButton.disabled = true;
            deriveButton.textContent = '‚è≥ Deriving Addresses...';

            showStatus('üîÑ Validating seed phrase...', 'info');

            try {
                // Paso 1: Validar seed phrase
                const validation = await invoke('validate_seed_phrase', { phrase: seedPhrase });

                if (!validation.valid) {
                    showStatus(`‚ùå ${validation.message}`, 'error');
                    return;
                }

                showStatus(`üîÑ Deriving addresses for ${selectedNetworks.length} networks...`, 'info');

                // Paso 2: Derivar direcciones
                const addresses = await invoke('derive_addresses', {
                    seedPhrase: seedPhrase,
                    passphrase: passphrase.length > 0 ? passphrase : null,
                    networks: selectedNetworks
                });

                showStatus('‚úÖ Addresses derived successfully', 'success');
                displayResults(addresses, selectedNetworks, passphrase.length > 0);

            } catch (error) {
                console.error('Derivation error:', error);
                showStatus(`‚ùå Derivation failed: ${error}`, 'error');
            } finally {
                deriveButton.disabled = false;
                deriveButton.textContent = originalText;
            }
        }

        function displayResults(addresses, networks, hasPassphrase) {
            const resultsArea = document.getElementById('resultsArea');
            resultsArea.innerHTML = '';

            const networkInfo = {
                bitcoin: { name: 'Bitcoin', symbol: '‚Çø', color: '#f7931a' },
                ethereum: { name: 'Ethereum', symbol: 'Œû', color: '#627eea' },
                ergo: { name: 'Ergo', symbol: '‚ö°', color: '#ff6600' },
                bsc: { name: 'Binance Smart Chain', symbol: 'üü°', color: '#f3ba2f' },
                polygon: { name: 'Polygon', symbol: 'üî∑', color: '#8247e5' },
                cardano: { name: 'Cardano', symbol: '‚Ç≥', color: '#3498db' },
                dogecoin: { name: 'Dogecoin', symbol: '√ê', color: '#c2a633' },
                litecoin: { name: 'Litecoin', symbol: '≈Å', color: '#a6a9aa' },
                solana: { name: 'Solana', symbol: '‚óé', color: '#9945ff' }
            };

            // Crear estad√≠sticas
            let totalAddresses = 0;
            networks.forEach(network => {
                totalAddresses += (addresses[network] || []).length;
            });

            const statsBar = document.createElement('div');
            statsBar.className = 'stats-bar';
            statsBar.innerHTML = `
                <div class="stat-item">
                    <div class="stat-number">${networks.length}</div>
                    <div class="stat-label">Networks</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${totalAddresses}</div>
                    <div class="stat-label">Total Addresses</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${hasPassphrase ? 'Yes' : 'No'}</div>
                    <div class="stat-label">Passphrase</div>
                </div>
            `;
            resultsArea.appendChild(statsBar);

            networks.forEach(network => {
                const networkAddresses = addresses[network] || [];
                const info = networkInfo[network];

                const networkSection = document.createElement('div');
                networkSection.className = 'network-section';

                let html = `
                    <div class="network-title">
                        <span style="color: ${info.color}">${info.symbol}</span>
                        ${info.name} Addresses (${networkAddresses.length})
                        ${hasPassphrase ? '<span style="background: rgba(255, 149, 0, 0.2); padding: 2px 6px; border-radius: 4px; font-size: 0.7em; margin-left: 8px;">üîë With Passphrase</span>' : ''}
                    </div>
                    <div class="address-grid">
                `;

                if (networkAddresses.length === 0) {
                    html += `
                        <div class="address-card">
                            <div class="address-type">No addresses generated</div>
                            <div class="address-value">This network may not be fully implemented or an error occurred during derivation.</div>
                        </div>
                    `;
                } else {
                    networkAddresses.forEach(addr => {
                        html += `
                            <div class="address-card">
                                <div class="address-type">${addr.address_type}</div>
                                <div class="address-path">${addr.path}</div>
                                <div class="address-value" onclick="copyToClipboard('${addr.address}', this)" title="Click to copy">
                                    ${addr.address}
                                </div>
                            </div>
                        `;
                    });
                }

                html += '</div>';
                networkSection.innerHTML = html;
                resultsArea.appendChild(networkSection);
            });

            resultsArea.classList.remove('hidden');
        }

        async function copyToClipboard(text, element) {
            try {
                await navigator.clipboard.writeText(text);

                // Feedback visual
                const originalClass = element.className;
                element.classList.add('copy-feedback');

                setTimeout(() => {
                    element.className = originalClass;
                }, 1000);

                console.log('Address copied to clipboard:', text);
            } catch (error) {
                console.error('Failed to copy:', error);
            }
        }

        // Test r√°pido al cargar
        window.addEventListener('load', async () => {
            // Llenar con seed phrase de prueba
            const testSeed = "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about";
            document.getElementById('seedPhrase').value = testSeed;

            console.log('üß™ Test seed phrase loaded. Ready to derive addresses!');
            showStatus('üß™ Test seed phrase loaded. Click "Derive Addresses" to test all networks!', 'info');

            // Auto-derivar despu√©s de 2 segundos para demostraci√≥n
            setTimeout(() => {
                if (tauriAvailable) {
                    deriveAddresses();
                }
            }, 2000);
        });
    </script>
</body>
</html>
